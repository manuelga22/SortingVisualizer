{"version":3,"sources":["Sorting/Algorithms/QuickSort.js","Sorting/Algorithms/MergeSort.js","Instructions/Instructions.js","Sorting/SortingVisualizer.js","Sorting/Algorithms/SelectionSort.js","Sorting/Algorithms/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["quickSort","arr","start","end","animations","pivots","index","partition","pivot","push","pivotIndex","j","temp","getMergeSortAnimations","array","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","doMerge","Instructions","className","href","SortingViasualizer","useState","bars","setBars","generateBars","number","barsArray","bar","counter","random_num","random","document","createElement","classList","style","height","quickSortAnimation","arrayBars","getElementsByClassName","a","first_swap_index","second_swap_index","setTimeout","background","console","log","swap","index1","index2","sleep","useEffect","onClick","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","backgroundColor","newHeight","mergeSortAnimation","len","min","tmp","sortedArray","selectionSort","then","selectionSortAnimation","inputArr","swapped","bubbleSort","bubbleSortAnimation","id","map","key","ms","Promise","resolve","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.268aacfc.chunk.js","sourcesContent":["\n\nexport function quickSort(arr, start, end, animations=[],pivots=[]){\n  \n    if (start < end){\n        /* pi is partitioning index, arr[pi] is now\n           at right place */\n        let index =  partition(arr, start, end,animations,pivots);\n          \n         quickSort(arr, start, index - 1, animations,pivots);  // Before pi\n         quickSort(arr, index + 1, end, animations,pivots); // After pi\n        \n    }\n    return{\n        animations,\n        pivots,\n    } \n}\nfunction partition(arr, start, end,animations,pivots){\n    // pivot (Element to be placed at right position)\n    let pivot = arr[end];\n    \n    //add pivot to\n    pivots.push(end); \n\n    let pivotIndex = start;  // Index of smaller element\n\n    for (let j = start; j < end; j++){\n        // If current element is smaller than the pivot\n        if (arr[j] < pivot){    \n            // pushing the two elements being swapped for the animation\n            animations.push([pivotIndex,j])\n            pivots.push(end); \n            \n            let temp = arr[pivotIndex]; \n            arr[pivotIndex] = arr[j]; \n            arr[j] = temp; \n\n            pivotIndex++;// increment index of smaller element\n        }\n\n    }\n      // pushing the two elements being swapped for the animation\n       animations.push([pivotIndex,end])\n     \n       let temp = arr[pivotIndex];\n       arr[pivotIndex] = arr[end];\n       arr[end] = temp;\n     \n   \n    return pivotIndex;\n}","export let animationsMergeSort=[];\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n","import { useEffect,useState} from 'react';\nimport './Instructions.css'\n\nfunction Instructions(){\n    return (\n        <div className=\"instructions\">\n\n            <div>\n                <h2>\n                   Sorting Visualizer\n                </h2>\n                <p>\n                    This project demostrates how the most famous sorting algorithms work\n                    by showing <br></br> an animation of each of their iterations.\n                </p>\n                <p>\n                    <b>Click on the buttons to see how each of the algorithm sorts the bars!</b>\n                </p>\n                <p>\n                    If you are an employer or recruiter, don't hesitate to connect with me on <a href=\"https://www.linkedin.com/in/manuelga\">Linked-in</a>\n                </p>\n            </div>\n\n        </div>\n    )\n}\nexport default Instructions;","import { useEffect,useState} from 'react';\nimport {quickSort} from './Algorithms/QuickSort';\nimport {bubbleSort} from './Algorithms/BubbleSort';\nimport {selectionSort} from './Algorithms/SelectionSort';\nimport {getMergeSortAnimations, animationsMergeSort} from './Algorithms/MergeSort';\nimport Instructions from '../Instructions/Instructions';\n\nimport './SortingVisualizer.css'\nfunction SortingViasualizer() {\n\n    const [bars, setBars] = useState([]); \n\n    const generateBars=(number)=>{ \n        let barsArray=[];     \n        let bar = ``\n        let counter = 0;\n        while (counter < number){\n\n            let random_num = Math.floor((Math.random() * 300) + 5)\n            bar= document.createElement('div')\n            bar.classList = \"bar\"\n            bar.style.height = random_num+'px'\n            barsArray.push(random_num) //store the height of the bar\n            counter++; \n        }\n        setBars([...barsArray])\n    };\n    const quickSortAnimation = (bars)=>{\n        const arrayBars = document.getElementsByClassName('bar');\n        let array = [...bars]; //copy of bars\n      \n        // animations will have the index of the bars being moved\n        let {animations,pivots} = quickSort(array,0,array.length-1);\n        for(let a =0; a<animations.length; a++){ \n            let first_swap_index;\n            let second_swap_index;  \n            let pivot; \n            setTimeout(()=>{\n                first_swap_index = animations[a][0];\n                second_swap_index = animations[a][1];   \n                pivot = pivots[a]\n                arrayBars[first_swap_index].style.background=\"green\";\n                arrayBars[second_swap_index].style.background=\"yellow\";\n                arrayBars[pivot].style.background=\"purple\";\n                console.log(first_swap_index,second_swap_index)\n                //swap the bars\n                setBars([...swap(first_swap_index, second_swap_index, bars) ])\n                //set the bars to their original color\n                arrayBars[first_swap_index].style.background=\"red\";\n                arrayBars[second_swap_index].style.background=\"red\";\n                //arrayBars[pivot].style.background=\"red\";\n            },a*3)//(a*number) means that the animations will execute one after the other\n          \n        } \n    };\n    const bubbleSortAnimation = ()=>{\n        const arrayBars = document.getElementsByClassName('bar')\n        let copyOfBars = [...bars] //copy of bars\n        const {sortedArray,animations} =  bubbleSort(copyOfBars);\n        for(let a=0;a<animations.length;a++){\n            setTimeout(()=>{\n                let first_swap_index = animations[a][1];\n                let second_swap_index = animations[a][2];  \n                arrayBars[first_swap_index].style.background=\"black\";\n                arrayBars[second_swap_index].style.background=\"yellow\";    \n                if(animations[a][0] == \"swap\")setBars([...swap(first_swap_index, second_swap_index, bars) ])\n                sleep(30).then(()=>{\n                    arrayBars[first_swap_index].style.background=\"lightcoral\";\n                    arrayBars[second_swap_index].style.background=\"lightcoral\";\n                })\n            },a*30)\n        }\n    };\n    const selectionSortAnimation =()=>{\n        const arrayBars = document.getElementsByClassName('bar')\n        let copyBars = [...bars] // copy of bars\n        const {sortedArray,animations} =  selectionSort(copyBars);\n        for(let a=0;a<animations.length;a++){\n            setTimeout(()=>{\n                let first_swap_index = animations[a][1];\n                let second_swap_index = animations[a][2];  \n                console.log(animations[a][0], first_swap_index,second_swap_index)\n                arrayBars[first_swap_index].style.background=\"black\";\n                arrayBars[second_swap_index].style.background=\"yellow\";  \n                if(animations[a][0] == \"swap\")setBars([...swap(first_swap_index, second_swap_index, bars) ])\n                sleep(80).then(()=>{\n                    arrayBars[first_swap_index].style.background=\"lightcoral\";\n                    arrayBars[second_swap_index].style.background=\"lightcoral\";\n                })\n            },a*160)\n        }\n    };\n  \n   \n    const mergeSortAnimation=()=> {\n        const arrayBars = document.getElementsByClassName('bar')\n        let copyBars = [...bars] // copy of bars\n        let animations = getMergeSortAnimations(copyBars);\n        console.log(animations)\n        for(let i=0;i<animations.length;i++){\n          // every new odd element in the array of animations means \n          //that two new elements are being compared\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            //\n            const color = i % 3 === 0 ? 'yellow' : 'lightcoral';\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * 30);\n          } else {\n            setTimeout(() => {\n              // here is where the swapping happens, newHeight is the height of the element \n              //that's is now gunna be at the index stored in baroneIdx\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * 30);\n          }\n        }\n      };\n    \n\n\n    function swap(index1, index2,array){\n        sleep(800)\n        let temp = array[index1];\n        array[index1] = array[index2];\n        array[index2] = temp;\n        return array   \n    };\n \n\n\n    useEffect(() => {       \n       generateBars(50)\n    },[])\n\n\n    return (\n\n        <div className=\"container\">\n            <nav className=\"nav-bar flex\">\n                <ul className=\"flex\">\n                    <li>\n                        <button className=\"btn\" onClick={ ()=>{mergeSortAnimation()} }>Merge Sort</button>\n                    </li>\n                    <li>\n                        <button className=\"btn\" onClick={ ()=>{quickSortAnimation(bars)} }>Quick Sort</button>\n                    </li>\n                    <li>\n                        <button  className=\"btn\" onClick={()=>{selectionSortAnimation()}}>Selection Sort</button>\n                    </li>\n                    <li>\n                        <button className=\"btn\"  onClick={ ()=>{ bubbleSortAnimation() }}>Bubble Sort</button>\n                    </li>\n                    <li>\n                        <button className=\"btn\"  onClick={ ()=>{ generateBars(50) }}>Reset Array</button>\n                    </li>\n                </ul>\n            </nav>\n\n\n            <div className=\"Visualizer flex\" id=\"Visualizer\">\n            {bars.map((bar,key)=><div style={{height:bar}} className=\"bar\" key={key}></div>)}\n            </div>\n\n          \n\n            <Instructions></Instructions>\n\n\n        </div>\n    );\n\n}\n\n\nexport default SortingViasualizer;\n\n//makes the program wait\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n","export function selectionSort(arr, animations=[]){\n\n\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        let min = i;\n\n        for (let j = i + 1; j < len; j++) {\n            if (arr[min] > arr[j]) {\n                min = j;\n            }\n        } \n        if (min !== i) {\n            animations.push([\"swap\",i, min])\n            let tmp = arr[i];\n            arr[i] = arr[min];\n            arr[min] = tmp;\n        }else{\n            animations.push([\"no swap\",i, min])\n        }\n    }\n    return {\n        sortedArray: arr,\n        animations:animations\n    } \n\n};","export function bubbleSort(inputArr, animations= []){\n\n    let len = inputArr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < len; i++) {\n           \n            if (inputArr[i] > inputArr[i + 1]) {\n                //these are the elements being compared, the animations array contains \n                //the index of the elements being compared\n                animations.push([\"swap\",i, i+1])\n\n                let tmp = inputArr[i];\n                inputArr[i] = inputArr[i + 1];\n                inputArr[i + 1] = tmp;\n                swapped = true;\n            }else{\n                 //these are the elements being compared, the animations array contains \n                //the index of the elements being compared\n                if((i+1) != len)animations.push([\"no swap\",i, i+1])\n            }\n        }\n    } while (swapped);\n    return {\n        array: inputArr,\n        animations: animations\n    }\n\n}\n","import './App.css';\nimport SortingVisualizer from './Sorting/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}